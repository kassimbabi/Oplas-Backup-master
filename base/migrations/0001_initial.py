# Generated by Django 5.1.4 on 2024-12-30 18:21

import datetime
import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
        ('contenttypes', '0002_remove_content_type_name'),
    ]

    operations = [
        migrations.CreateModel(
            name='AssignToClasses',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('CreatedDate', models.DateTimeField(auto_now_add=True, verbose_name='Create Date')),
                ('ModifiedDate', models.DateTimeField(auto_now=True, verbose_name='Modified Date')),
            ],
            options={
                'verbose_name': 'Assign To Class',
                'verbose_name_plural': 'Assign To Classes',
            },
        ),
        migrations.CreateModel(
            name='EducationLevels',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('LevelName', models.CharField(max_length=100, verbose_name='Level Name')),
                ('CreatedDate', models.DateTimeField(auto_now_add=True, verbose_name='Create Date')),
                ('ModifiedDate', models.DateTimeField(auto_now=True, verbose_name='Modified Date')),
            ],
            options={
                'verbose_name': 'Education Level',
                'verbose_name_plural': 'Education Levels',
            },
        ),
        migrations.CreateModel(
            name='Genders',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('GenderName', models.CharField(max_length=100, verbose_name='Gender Name')),
                ('CreatedDate', models.DateTimeField(auto_now_add=True, verbose_name='Create Date')),
                ('ModifiedDate', models.DateTimeField(auto_now=True, verbose_name='Modified Date')),
            ],
            options={
                'verbose_name': 'Gender',
                'verbose_name_plural': 'Genders',
            },
        ),
        migrations.CreateModel(
            name='SchoolClases',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ClassName', models.CharField(max_length=100, verbose_name='Class Name')),
                ('CreatedDate', models.DateTimeField(auto_now_add=True, verbose_name='Create Date')),
                ('ModifiedDate', models.DateTimeField(auto_now=True, verbose_name='Modified Date')),
            ],
            options={
                'verbose_name': 'School Class',
                'verbose_name_plural': 'School Clases',
            },
        ),
        migrations.CreateModel(
            name='SchoolLevels',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('LevelName', models.CharField(max_length=100, verbose_name='Level Name')),
                ('level_order', models.IntegerField(unique=True, verbose_name='Level Order')),
                ('CreatedDate', models.DateTimeField(auto_now_add=True, verbose_name='Create Date')),
                ('ModifiedDate', models.DateTimeField(auto_now=True, verbose_name='Modified Date')),
            ],
            options={
                'verbose_name': 'School Level',
                'verbose_name_plural': 'School Levels',
            },
        ),
        migrations.CreateModel(
            name='Statuses',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('StatusName', models.CharField(max_length=100, verbose_name='Status Name')),
                ('CreatedDate', models.DateTimeField(auto_now_add=True, verbose_name='Create Date')),
                ('ModifiedDate', models.DateTimeField(auto_now=True, verbose_name='Modified Date')),
            ],
            options={
                'verbose_name': 'Status',
                'verbose_name_plural': 'Statuses',
            },
        ),
        migrations.CreateModel(
            name='Subjects',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('SubjectName', models.CharField(max_length=100, verbose_name='Subject Name')),
                ('CreatedDate', models.DateTimeField(auto_now_add=True, verbose_name='Create Date')),
                ('ModifiedDate', models.DateTimeField(auto_now=True, verbose_name='Modified Date')),
            ],
            options={
                'verbose_name': 'Subject',
                'verbose_name_plural': 'Subjects',
            },
        ),
        migrations.CreateModel(
            name='WebImages',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ImageTitle', models.CharField(max_length=100, verbose_name='Image Title')),
                ('Image', models.ImageField(upload_to='web-images', verbose_name='Upload Image')),
                ('CreatedDate', models.DateTimeField(auto_now_add=True, verbose_name='Create Date')),
                ('ModifiedDate', models.DateTimeField(auto_now=True, verbose_name='Modified Date')),
            ],
            options={
                'verbose_name': 'Web Image',
                'verbose_name_plural': 'Web Images',
            },
        ),
        migrations.CreateModel(
            name='WhoPosts',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('PostedBy', models.CharField(max_length=100, verbose_name='Posted by')),
                ('CreatedDate', models.DateTimeField(auto_now_add=True, verbose_name='Create Date')),
                ('ModifiedDate', models.DateTimeField(auto_now=True, verbose_name='Modified Date')),
            ],
            options={
                'verbose_name': 'Who Post',
                'verbose_name_plural': 'Who Posts',
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('role', models.CharField(choices=[('admin', 'admin'), ('teacher', 'teacher'), ('student', 'student')], max_length=20)),
                ('phoneNumber', models.CharField(blank=True, max_length=15, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'User',
                'verbose_name_plural': 'Users',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='AskQuestion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('question_text', models.TextField()),
                ('is_answered', models.BooleanField(default=False)),
                ('views', models.PositiveIntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('student', models.ForeignKey(limit_choices_to={'role': 'student'}, on_delete=django.db.models.deletion.CASCADE, related_name='questions', to=settings.AUTH_USER_MODEL)),
                ('assignment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='questions', to='base.assigntoclasses')),
                ('class_name', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='asked_questions', to='base.schoolclases')),
                ('LevelName', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='base.schoollevels', verbose_name='Level Name')),
                ('SubjectName', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='asked_questions', to='base.subjects')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='AnswerQuestion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('answer_text', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('answered_by', models.ForeignKey(limit_choices_to={'role': 'teacher'}, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('question_ask', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='answers', to='base.askquestion')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Notification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('message', models.CharField(max_length=255)),
                ('is_read', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('answer_question', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='notifications', to='base.answerquestion')),
                ('ask_question', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='notifications', to='base.askquestion')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='notifications', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.AddField(
            model_name='assigntoclasses',
            name='School',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='base.schoolclases', verbose_name='Class Name'),
        ),
        migrations.AddField(
            model_name='schoolclases',
            name='SchoolLevel',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='base.schoollevels', verbose_name='School Level'),
        ),
        migrations.AddField(
            model_name='assigntoclasses',
            name='Status',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='base.statuses', verbose_name='Status'),
        ),
        migrations.CreateModel(
            name='Students',
            fields=[
                ('studentID', models.CharField(max_length=100, primary_key=True, serialize=False, verbose_name='Student ID')),
                ('firstName', models.CharField(max_length=100, verbose_name='First Name')),
                ('middleName', models.CharField(max_length=100, verbose_name='Middle Name')),
                ('lastName', models.CharField(max_length=100, verbose_name='Last Name')),
                ('dob', models.DateField(verbose_name='Date of Birth')),
                ('address', models.CharField(max_length=100, verbose_name='Address')),
                ('academicYear', models.IntegerField(verbose_name='Academic Year')),
                ('createdDate', models.DateTimeField(auto_now_add=True, verbose_name='Create Date')),
                ('modifiedDate', models.DateTimeField(auto_now=True, verbose_name='Modified Date')),
                ('className', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='base.schoolclases', verbose_name='School Class')),
                ('gender', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='base.genders', verbose_name='Gender')),
                ('schoolLevel', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='base.schoollevels', verbose_name='School Level')),
                ('status', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='base.statuses', verbose_name='Status')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='student', to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'verbose_name': 'Student',
                'verbose_name_plural': 'Students',
            },
        ),
        migrations.CreateModel(
            name='Papers',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('PaperName', models.CharField(max_length=100, verbose_name='Paper Name')),
                ('UploadFile', models.ImageField(max_length=500, null=True, upload_to='papers', verbose_name='Upload File')),
                ('CreatedDate', models.DateTimeField(auto_now_add=True, verbose_name='Create Date')),
                ('ModifiedDate', models.DateTimeField(auto_now=True, verbose_name='Modified Date')),
                ('LevelName', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='base.schoollevels', verbose_name='Level Name')),
                ('SubjectName', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='base.subjects', verbose_name='Subject Name')),
            ],
            options={
                'verbose_name': 'Paper',
                'verbose_name_plural': 'Papers',
            },
        ),
        migrations.CreateModel(
            name='Notes',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('NotesName', models.CharField(max_length=100, verbose_name='Notes Name')),
                ('UploadFile', models.ImageField(max_length=500, null=True, upload_to='notes', verbose_name='Upload File')),
                ('CreatedDate', models.DateTimeField(auto_now_add=True, verbose_name='Create Date')),
                ('ModifiedDate', models.DateTimeField(auto_now=True, verbose_name='Modified Date')),
                ('LevelName', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='base.schoollevels', verbose_name='Level Name')),
                ('SubjectName', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='base.subjects', verbose_name='Subject Name')),
            ],
            options={
                'verbose_name': 'Notes',
                'verbose_name_plural': 'Notes',
            },
        ),
        migrations.CreateModel(
            name='Books',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('BookName', models.CharField(max_length=100, verbose_name='Book Name')),
                ('UploadFile', models.FileField(max_length=500, null=True, upload_to='books', verbose_name='Upload File')),
                ('CreatedDate', models.DateTimeField(auto_now_add=True, verbose_name='Create Date')),
                ('ModifiedDate', models.DateTimeField(auto_now=True, verbose_name='Modified Date')),
                ('LevelName', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='base.schoollevels', verbose_name='Level Name')),
                ('SubjectName', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='base.subjects', verbose_name='Subject Name')),
            ],
            options={
                'verbose_name': 'Book',
                'verbose_name_plural': 'Books',
            },
        ),
        migrations.AddField(
            model_name='assigntoclasses',
            name='Subject',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='base.subjects', verbose_name='Subject Name'),
        ),
        migrations.CreateModel(
            name='Teachers',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('firstName', models.CharField(default='John', max_length=100, verbose_name='First Name')),
                ('middleName', models.CharField(default='Michael', max_length=100, verbose_name='Middle Name')),
                ('lastName', models.CharField(default='Doe', max_length=100, verbose_name='Last Name')),
                ('dob', models.DateField(default=datetime.date(1990, 1, 1), verbose_name='Date of Birth')),
                ('address', models.CharField(default='123 Main St, Anytown', max_length=100, verbose_name='Address')),
                ('phoneNumber', models.CharField(default='+1234567890', max_length=100, verbose_name='Phone Number')),
                ('emailAddress', models.CharField(default='john.doe@example.com', max_length=100, verbose_name='Email Address')),
                ('createdDate', models.DateTimeField(auto_now_add=True, verbose_name='Create Date')),
                ('modifiedDate', models.DateTimeField(auto_now=True, verbose_name='Modified Date')),
                ('educationLevel', models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, to='base.educationlevels', verbose_name='Education Level')),
                ('gender', models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, to='base.genders', verbose_name='Gender')),
                ('status', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='base.statuses', verbose_name='Status')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='teacher', to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'verbose_name': 'Teacher',
                'verbose_name_plural': 'Teachers',
            },
        ),
        migrations.CreateModel(
            name='Questions',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('QuestionName', models.TextField(verbose_name='Question Name')),
                ('IsApproved', models.BooleanField(verbose_name='Is Approved')),
                ('views', models.PositiveIntegerField(default=0)),
                ('CreatedDate', models.DateTimeField(auto_now_add=True, verbose_name='Create Date')),
                ('ModifiedDate', models.DateTimeField(auto_now=True, verbose_name='Modified Date')),
                ('LevelName', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='base.schoollevels', verbose_name='Level Name')),
                ('SubjectName', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='base.subjects', verbose_name='Subject Name')),
                ('ApprovedBy', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='base.teachers', verbose_name='Approved By')),
                ('QuestionBy', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='base.whoposts', verbose_name='Question By')),
            ],
            options={
                'verbose_name': 'Question',
                'verbose_name_plural': 'Questions',
            },
        ),
        migrations.CreateModel(
            name='Comments',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('object_id', models.PositiveIntegerField()),
                ('commentText', models.TextField()),
                ('teacherReply', models.TextField(blank=True, null=True)),
                ('replyDate', models.DateTimeField(blank=True, null=True)),
                ('isApproved', models.BooleanField(default=False)),
                ('createdDate', models.DateTimeField(auto_now_add=True)),
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contenttypes.contenttype')),
                ('student', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='base.students')),
                ('teacher', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='base.teachers')),
            ],
            options={
                'ordering': ['-createdDate'],
            },
        ),
        migrations.AddField(
            model_name='assigntoclasses',
            name='Teacher',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='base.teachers', verbose_name='Teacher Name'),
        ),
        migrations.CreateModel(
            name='Videos',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('VideosName', models.CharField(max_length=100, verbose_name='Videos Name')),
                ('UploadFile', models.FileField(max_length=500, null=True, upload_to='Videos', verbose_name='Upload File')),
                ('CreatedDate', models.DateTimeField(auto_now_add=True, verbose_name='Create Date')),
                ('ModifiedDate', models.DateTimeField(auto_now=True, verbose_name='Modified Date')),
                ('LevelName', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='base.schoollevels', verbose_name='Level Name')),
                ('SubjectName', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='base.subjects', verbose_name='Subject Name')),
            ],
        ),
        migrations.CreateModel(
            name='Answers',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Answer', models.TextField(verbose_name='Answer')),
                ('IsApproved', models.BooleanField(verbose_name='Is Approved')),
                ('CreatedDate', models.DateTimeField(auto_now_add=True, verbose_name='Create Date')),
                ('ModifiedDate', models.DateTimeField(auto_now=True, verbose_name='Modified Date')),
                ('QuestionName', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='answers', to='base.questions', verbose_name='Question Name')),
                ('ApprovedBy', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='base.teachers', verbose_name='Approved By')),
                ('AnswerBy', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='base.whoposts', verbose_name='Answer By')),
            ],
            options={
                'verbose_name': 'Answer',
                'verbose_name_plural': 'Answers',
            },
        ),
    ]
